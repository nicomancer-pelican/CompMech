function rho_new = NewtonRaphson(Km, Fm, EA, L)
    % starting values
    rho_old = Km\Fm;    
    
    % initial functional G = K_M * rho - F_M
    G_old = Km*rho_old - Fm;
    
    % nodal forces - goal
%     R_c = elementFmat;
    
    % set arbitrary error to jumpstart loop
    eps = 1;
    i = 0;
    while abs(eps) > 0.01
        % tangent stiffness K_T = K_M + K_G
        Kg = Kgeom(rho_old, EA, L);
        Kt = Km + Kg;
        
        % update rho
        rho_new = Kt\(Fm + Km*rho_old + ((Km + Kg)^i)*rho_old);
        
        % find delta rho
        delta_rho = rho_new - rho_old;
        
        % update functional
        G_new = Km*rho_new - Fm - Fgeom(rho_new, EA, L);
        
        % error calculation
        eps = abs(G_new - G_old);
        
        % update values
        G_old = G_new;
        rho_old = rho_new;
        
        % power counter
        i = i+1;
    end
end

%should output r as the displacements and K_t as the geometric stiffness

% eof